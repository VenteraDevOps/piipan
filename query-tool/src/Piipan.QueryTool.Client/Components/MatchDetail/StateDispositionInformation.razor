@using Piipan.Match.Api.Models.Resolution
@using static Piipan.QueryTool.Client.Helpers.ValueToDisplayHelper
@using Piipan.QueryTool.Client.Helpers
@code {
    [Parameter] public Disposition Disposition { get; set; }
    [Parameter] public bool InitiatingState { get; set; }
    [Parameter] public DateTime? MatchDate { get; set; }
    [Parameter] public string InitiatingStateAbbr { get; set; }
    [Parameter] public string InitiatingStateName { get; set; }

    RenderFragment header =>
        @<h5>@StateHelper.GetStateName(Disposition.State) <span>(@(InitiatingState ? "Initiating" : "Matching") State)</span></h5>
    ;

    List<DisplayInfo> StateValues { get; set; } = new();

    protected override void OnInitialized()
    {
        StateValues.Add(new("Vulnerable Individual", Disposition.VulnerableIndividual));
        StateValues.Add(new("Invalid Match", Disposition.InvalidMatch));
        StateValues.Add(new("Initial Action Taken", Disposition.InitialActionTaken));
        StateValues.Add(new("Initial Action Date", Disposition.InitialActionAt));
        StateValues.Add(new("Final Disposition Taken", Disposition.FinalDisposition));
        StateValues.Add(new("Match recorded on", MatchDate));
        string stateNameAbbrCombo = InitiatingStateName + " (" + (InitiatingStateAbbr == null ? "" : InitiatingStateAbbr.ToUpper()) + ")";
        StateValues.Add(new("Match query by", stateNameAbbrCombo));

        if (!string.IsNullOrWhiteSpace(Disposition.FinalDisposition))
        {
            string finalDispositionDateDisplay = Disposition.FinalDisposition switch
            {
                "Benefits Approved" => "Benefits Start Date",
                "Benefits Terminated" => "Benefits End Date",
                _ => "Final Disposition Date"
            };
            StateValues.Add(new(finalDispositionDateDisplay, Disposition.FinalDispositionDate));
        }
    }
}

<StateInformation StateInfo="StateValues" Header="header" />