@using Newtonsoft.Json
@using Piipan.Components.Modals
@using Piipan.Components.Routing
@using Piipan.Match.Api.Models
@using Piipan.Match.Api.Models.Resolution
@using Piipan.QueryTool.Client.Helpers
@using Piipan.QueryTool.Client.Modals
@using Piipan.States.Api.Models
@using Piipan.QueryTool.Client.Models
@using Piipan.Components.Layout
@using Piipan.Components.Tag
@using static Piipan.Components.Shared.CommonConstants
@inject IModalManager ModalManager
@inject PiipanNavigationManager NavigationManager


@code {
    [Parameter] public ParameterBase<MatchResApiResponse> Match { get; set; }
    [Parameter] public ParameterBase<StatesInfoResponse> StateInfo { get; set; }
    [Parameter] public string LoggedInUsersState { get; set; }
    [Parameter] public string Token { get; set; }
    [Parameter] public MatchDetailData MatchDetailInfo { get; set; }
    [Parameter] public List<ServerError> ServerErrors { get; set; }
    [Parameter] public string Role { get; set; }
    [Parameter] public string[] RequiredRolesToEdit { get; set; }

    private DispositionModel model;

    private bool saving = false;
    private bool CanEditFields => RequiredRolesToEdit.Contains(Role);
    List<(string Property, string Error)> serverErrorList;
    private bool MatchIsOpen => Match.Data.Data.Status.ToLower() == "open";


    protected override void OnInitialized()
    {
        model = MatchDetailInfo?.FailedDispositionModel ?? (new DispositionModel(IsUserInInitiatingState() ? InitiatingStateDisposition :   MatchingStateDisposition));
        model.MatchDetailReferralPage = MatchDetailInfo.ReferralPage;
        model.MatchDate = Match.Data.Data.CreatedAt;
        if (ServerErrors?.Count > 0)
        {
            serverErrorList = new(ServerErrors.Select(n => (n.Property, n.Error)));
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        // Show the Vulnerable Individual modal when referral page is other and this wasn't a save.
        if (firstRender && MatchDetailInfo?.ReferralPage == MatchDetailReferralPage.Other && MatchDetailInfo.SaveSuccess == null)
        {
            if (Match.Data.Data.Dispositions.Any(n => n.VulnerableIndividual == true))
            {
                ModalManager.Show<VulnerableIndividualModal>(
                    new VulnerableIndividualModal()
                    {
                    },
                    new ModalInfo
                    {
                        ForceAction = true
                    }
                );
            }
        }
    }

    private TagTheme StatusTheme()
    {
        return Match.Data.Data.Status.ToLower() switch
        {
            "open" => TagTheme.Green,
            _ => TagTheme.Gray
        };
    }
    private bool IsMatchVulnerable()
    {
        return Match.Data.Data.Dispositions.Any(n => n.VulnerableIndividual == true);
    }
    private bool IsMatchValid()
    {

        for (int i = 0; i < Match.Data.Data.Dispositions.Count(); i++)
        {
            if (Match.Data.Data.Dispositions[i].InvalidMatch == true)
            {
                return true;
            }
        }
        return false;
    }
    private bool TagNeeded()
    {
        return IsMatchValid() || IsMatchVulnerable();
    }
    private Task SubmitForm(bool valid)
    {
        if (valid)
        {
            saving = true;
        }
        else
        {
            saveNotificationDismissed = true;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    private string DaysSinceMatch(DateTime? matchDate)
    {
        DateTime currentDate = DateTime.Today;
        if (matchDate != null)
        {
            return (currentDate - matchDate.Value.Date).TotalDays.ToString();
        }
        else
        {
            return "";
        }

    }    

    private bool IsUserInInitiatingState ()
    {
        return LoggedInUsersState == InitiatingStateContactInfo.State;
    }

    private string MatchingStateAbbreviation => 
        Match.Data.Data.States.FirstOrDefault(s => string.Compare(s, Match.Data.Data.Initiator, StringComparison.CurrentCultureIgnoreCase) != 0);

    private Disposition InitiatingStateDisposition =>
        Match.Data.Data.Dispositions.FirstOrDefault(n => string.Compare(n.State, Match.Data.Data.Initiator, StringComparison.CurrentCultureIgnoreCase) == 0);

    private Disposition MatchingStateDisposition =>
        Match.Data.Data.Dispositions.FirstOrDefault(n => string.Compare(n.State, MatchingStateAbbreviation, StringComparison.CurrentCultureIgnoreCase) == 0);

    private Participant InitiatingStateParticipant =>
        Match.Data.Data.Participants.FirstOrDefault(n => string.Compare(n.State, Match.Data.Data.Initiator, StringComparison.CurrentCultureIgnoreCase) == 0);

    private Participant MatchingStateParticipant =>
        Match.Data.Data.Participants.FirstOrDefault(n => string.Compare(n.State, MatchingStateAbbreviation, StringComparison.CurrentCultureIgnoreCase) == 0);

    private StateInfoResponseData InitiatingStateContactInfo =>
        StateInfo.Data.Results.FirstOrDefault(n => string.Compare(n.StateAbbreviation, Match.Data.Data.Initiator, StringComparison.CurrentCultureIgnoreCase) == 0);

    private StateInfoResponseData MatchingStateContactInfo =>
        StateInfo.Data.Results.FirstOrDefault(n => string.Compare(n.StateAbbreviation, MatchingStateAbbreviation, StringComparison.CurrentCultureIgnoreCase) == 0);

    private bool saveNotificationDismissed = false;
}
<div class="grid-container">
    @if (!saveNotificationDismissed && MatchDetailInfo?.SaveSuccess == true)
    {
        <div class="match-detail-save-success">
            <UsaAlertBox Slim="true" AlertSeverity="AlertSeverity.Success" Dismissable="true" Dismissed="() => { saveNotificationDismissed = true; StateHasChanged(); }" >
                <p>Your update has been successfully saved.</p>
            </UsaAlertBox>
        </div>
    }
    @{
        (string link, string linkText) = MatchDetailInfo.ReferralPage switch
        {
            MatchDetailReferralPage.Query => ("/", "Back to Search for SNAP Participants"),
            MatchDetailReferralPage.MatchSearch => ("/match", "Back to Find a Match Record"),
            _ => (null, null)
        };
        
        if (link != null)
        {
            <a href="@link" class="usa-button--unstyled usa-button back-button">
            <svg class="@IconClass" aria-hidden="true" focusable="false" role="img">
                <use xlink:href="/images/sprite.svg#chevron_left"></use>
            </svg>@linkText</a>    
        }
    }

    <!-- Match header -->
    <h1><UsaTag Theme="StatusTheme()">@Match.Data.Data.Status</UsaTag><span>Match ID: @Match.Data.Data.MatchId</span></h1>

    @if (TagNeeded())
    {
        <div style="margin-bottom: 24px">
            @if(IsMatchVulnerable())
            {
                
                <UsaTag style="margin-right: 17px" Theme="TagTheme.Purple" BorderType="BorderType.RoundedSquare">Vulnerable Individual</UsaTag>
                
            }
            @if (IsMatchValid())
            {
                <UsaTag Theme="TagTheme.Orange" BorderType="BorderType.RoundedSquare">Invalid Match</UsaTag>
            }

        </div>
        
    }
    <UsaForm Id="snap-resolution-fields-form" InitialErrors="serverErrorList" Model="model" method="post" OnBeforeSubmit="SubmitForm">
        <Piipan.QueryTool.Client.Modals.ConfirmModalWrapper>
    <div class="grid-row matchInfoDiv">
        <dl>
            <div>
                <dt>Match Record Created:</dt>
                <dd>@Match.Data.Data.CreatedAt?.ToString(ValueToDisplayHelper.DateFormat) <span style="color:#6E6E6E">(@DaysSinceMatch(@Match.Data.Data.CreatedAt) days since match)</span></dd>
            </div>
            <div>
                <dt>Match Query By:</dt>
                <dd>@InitiatingStateContactInfo.State (@Match.Data.Data.Initiator.ToUpper())</dd>
            </div>
            <div>
                <dd>All NAC matches are based on an exact match of Last Name, Date of Birth, and Social Security Number.</dd>
            </div>
        </dl>
    </div>
    <!-- \match header -->
    <div class="match-detail-grid @((CanEditFields && MatchIsOpen)  ? "" : "one-col")">
        @if (CanEditFields && MatchIsOpen)
        {
            <div>
                <input type="hidden" name="DispositionData.MatchDetailReferralPage" value="@model.MatchDetailReferralPage" />
                <ResolutionFields State="@LoggedInUsersState" InitiatingState="IsUserInInitiatingState()" Token="@Token" DispositionData="@model"/>
                <button class="usa-button ResolutionFieldsSave" disabled="@saving">@(saving ? "Saving Changes..." : "Save Changes")</button>
            </div>
        }
        <div>
            <UsaAccordion>
                <UsaAccordionItem StartsExpanded="true">
                    <HeadingContent>SNAP Participant Information</HeadingContent>
                    <BodyContent>
                        <div class="two-state-grid">
                            @if (InitiatingStateParticipant != null)
                            {
                                <StateParticipantInformation Participant="@InitiatingStateParticipant" InitiatingState="true" />
                            }
                            @if (MatchingStateParticipant != null)
                            {
                                <StateParticipantInformation Participant="@MatchingStateParticipant" InitiatingState="false" />
                            }
                        </div>
                    </BodyContent>
                </UsaAccordionItem>
            </UsaAccordion>
            <UsaAccordion>
                <UsaAccordionItem StartsExpanded="true">
                    <HeadingContent>Match Information</HeadingContent>
                    <BodyContent>
                        <p>Each state's most recent updates are displayed below.</p>
                        <div class="two-state-grid">
                            @if (InitiatingStateDisposition != null)
                            {
                                <StateDispositionInformation Disposition="@InitiatingStateDisposition" InitiatingState="true" />
                            }
                            @if (MatchingStateDisposition != null)
                            {
                                <StateDispositionInformation Disposition="@MatchingStateDisposition" InitiatingState="false" />
                            }
                        </div>
                    </BodyContent>
                </UsaAccordionItem>
            </UsaAccordion>
            <UsaAccordion>
                <UsaAccordionItem StartsExpanded="true">
                    <HeadingContent>State Agency Contact Information</HeadingContent>
                    <BodyContent>
                        <ul>
                            <li>Use this information if you need to contact the other state in regards to this match</li>
                            <li>Do not exchange PII about the participant by email; use their state’s Participant ID</li>
                        </ul>
                        <div class="two-state-grid">
                            @if (InitiatingStateContactInfo != null)
                            {
                                <StateContactInformation StateInfo="InitiatingStateContactInfo" InitiatingState="true" />    
                            }
                            @if (MatchingStateContactInfo != null)
                            {
                                <StateContactInformation StateInfo="MatchingStateContactInfo" InitiatingState="false" />    
                            }
                        </div>
                    </BodyContent>
                </UsaAccordionItem>
            </UsaAccordion>
        </div>
    </div>
    </Piipan.QueryTool.Client.Modals.ConfirmModalWrapper>
    </UsaForm>
</div>