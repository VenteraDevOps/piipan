@using Piipan.Components.Alerts
@using Piipan.Components.Enums
@using System.Linq.Expressions
@using Piipan.Match.Api.Models.Resolution
@using Piipan.QueryTool.Client.Components.MatchDetail
@using Piipan.QueryTool.Client.Models
@using Piipan.States.Api.Models
@using Piipan.Shared.API.Utilities
@using static Piipan.Components.Tag.TagConstants
@inherits BaseComponentTest<MatchDetail>

@code {
    /// <summary>
    /// Set the default initial values for this test component
    /// </summary>
    public MatchDetailTests() : base()
    {
        InitialValues = new Piipan.QueryTool.Client.Components.MatchDetail.MatchDetail()
        {
            Match = new ParameterBase<MatchResApiResponse>
            {
                Data = new MatchResApiResponse
                {
                    Data = new MatchResRecord
                    {
                        Status = "open",
                        MatchId = "M123456",
                        Dispositions = new Disposition[]
                    {
                    new Disposition
                    {
                        State = "ea",
                        FinalDisposition = "Benefits Approved",
                        FinalDispositionDate = DateTime.Parse("02/02/2022"),
                        VulnerableIndividual = false,
                        InvalidMatch = false,
                        InitialActionAt = DateTime.Parse("01/01/2022"),
                        InitialActionTaken = "Notice Sent"
                    },
                    new Disposition
                    {
                        State = "eb",
                        FinalDisposition = "Benefits Terminated",
                        FinalDispositionDate = DateTime.Parse("02/02/2021"),
                        VulnerableIndividual = false,
                        InvalidMatch = false,
                        InitialActionAt = DateTime.Parse("01/01/2021"),
                        InitialActionTaken = "Notice Sent"
                    }
                    },
                        Participants = new Participant[]
                    {
                    new Participant
                    {
                        State = "ea",
                        CaseId = "c123",
                        ParticipantId = "p123",
                        RecentBenefitIssuanceDates = new List<DateRange>
                        {
                            new DateRange
                            {
                                Start = DateTime.Parse("01/01/2022"),
                                End = DateTime.Parse("02/02/2022")
                            },
                            new DateRange
                            {
                                Start = DateTime.Parse("03/03/2022"),
                                End = DateTime.Parse("04/04/2022")
                            }
                        }
                    },
                    new Participant
                    {
                        State = "eb",
                        CaseId = "c456",
                        ParticipantId = "p456",
                        ParticipantClosingDate = DateTime.Parse("01/01/2021"),
                        RecentBenefitIssuanceDates = new List<DateRange>
                        {
                            new DateRange
                            {
                                Start = DateTime.Parse("01/01/2021"),
                                End = DateTime.Parse("02/02/2021")
                            },
                            new DateRange
                            {
                                Start = DateTime.Parse("03/03/2021"),
                                End = DateTime.Parse("04/04/2021")
                            }
                        }
                    }
                    },
                        States = new string[] { "ea", "eb" },
                        Initiator = "ea"
                    }
                }
            },
            StateInfo = new ParameterBase<StatesInfoResponse>
            {
                Data = new StatesInfoResponse
                {
                    Results = new List<StateInfoResponseData>
                    {
                        new StateInfoResponseData
                        {
                            State = "Echo Alpha",
                            StateAbbreviation = "ea",
                            Email = "ea-test@usda.gov",
                            Phone = "123-456-7890"
                        },
                        new StateInfoResponseData
                        {
                            State = "Echo Bravo",
                            StateAbbreviation = "eb",
                            Email = "eb-test@usda.gov",
                            Phone = "123-456-7890"
                        }
                    }
                }
            }
        };
    }

    /// <summary>
    /// Create a matches list component
    /// </summary>
    protected override void CreateTestComponent()
    {
        JSInterop.SetupVoid("piipan.utilities.registerFormValidation", _ => true).SetVoidResult();
            JSInterop.Setup<int>("piipan.utilities.getCursorPosition", _ => true).SetResult(1);
            JSInterop.SetupVoid("piipan.utilities.setCursorPosition", _ => true).SetVoidResult();
            JSInterop.SetupVoid("piipan.utilities.scrollToElement", _ => true).SetVoidResult();
        Component = Render<MatchDetail>(
    @<MatchDetail Match="InitialValues.Match" StateInfo="InitialValues.StateInfo" LoggedInUsersState="Echo Bravo" SaveResponse="InitialValues.SaveResponse">
    </MatchDetail>
    );
    }

    #region Tests

    /// <summary>
    /// Verify the default markup of the match detail page
    /// </summary>
    [Fact]
    public void Match_Detail_Should_Exist_And_Have_Correct_Markup()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        Component!.MarkupMatches(
        @<div class="grid-container" >
          <h1 >
            <span class="usa-tag usa-tag--green usa-tag--round" >open</span>
            <span >Match ID: M123456</span>
          </h1>
          <div class="usa-form ">
            <form id="snap-resolution-fields-form" method="post" novalidate="" >
              <fieldset class="usa-fieldset">
                  <div class="grid-row matchInfoDiv" >
                    <dl >
                      <div >
                        <dt >Match Record Created:</dt>
                        <dd >
                          <span style="color:#6E6E6E" >( days since match)</span>
                        </dd>
                      </div>
                      <div >
                        <dt >Match Query By:</dt>
                        <dd >Echo Alpha (EA)</dd>
                      </div>
                      <div >
                        <dd >All NAC matches are based on an exact match of Last Name, Date of Birth, and Social Security Number.</dd>
                      </div>
                    </dl>
                  </div>
                  <div class="match-detail-grid" >
                    <div diff:ignore>  //Ignoring Resolution Fields Component
                    </div>
                    <div>
                        <div class="usa-accordion" aria-multiselectable="false">
                          <h4 class="usa-accordion__heading" >
                            <button class="usa-accordion__button" aria-expanded="true" aria-controls:ignore  >SNAP Participant Information</button>
                          </h4>
                          <div id:ignore class="usa-accordion__content usa-prose" >
                            <div class="two-state-grid" >
                              <div diff:ignore > //Ignoring State Participant Information Component
                              </div>
                              <div diff:ignore> //Ignoring State Participant Information Component
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="usa-accordion" aria-multiselectable="false">
                          <h4 class="usa-accordion__heading" >
                            <button class="usa-accordion__button" aria-expanded="true" aria-controls:ignore  >Match Information</button>
                          </h4>
                          <div id:ignore class="usa-accordion__content usa-prose" >
                            <p >Each state's most recent updates are displayed below.</p>
                            <div class="two-state-grid" >
                              <div diff:ignore> //Ignoring State Disposition Information Component
                              </div>
                              <div diff:ignore> //Ignoring State Disposition Information Component
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="usa-accordion" aria-multiselectable="false">
                          <h4 class="usa-accordion__heading" >
                            <button class="usa-accordion__button" aria-expanded="true" aria-controls:ignore  >State Agency Contact Information</button>
                          </h4>
                          <div id:ignore class="usa-accordion__content usa-prose" >
                            <ul >
                              <li >Use this information if you need to contact the other state in regards to this match</li>
                              <li >Do not exchange PII about the participant by email; use their state’s Participant ID</li>
                            </ul>
                            <div class="two-state-grid" >
                              <div diff:ignore> //Ignoring State Contact Information Component
                              </div>
                              <div diff:ignore> //Ignoring State Contact Information Component
                              </div>
                            </div>
                          </div>
                        </div>
                    </div>
                  </div>
              </fieldset>
              </form>
          </div>
         </div>
        );
    }

    /// <summary>
    /// Verify the match detail status tag is green when the status is open
    /// </summary>
    [Fact]
    public void Match_Detail_Status_Tag_Should_Be_Green_When_Open()
    {
        // Arrange
        CreateTestComponent();
        var tag = Component!.Find($".{TagClass}");

        // Assert
        Assert.True(tag.ClassList.Contains(TagThemeGreenClass));
    }

    /// <summary>
    /// Verify the match detail status tag is gray when the status is closed
    /// </summary>
    [Fact]
    public void Match_Detail_Status_Tag_Should_Be_Gray_When_Closed()
    {
        // Arrange
        InitialValues.Match.Data.Data.Status = "closed";
        CreateTestComponent();
        var tag = Component!.Find($".{TagClass}");

        // Assert
        Assert.True(tag.ClassList.Contains(TagThemeGrayClass));
    }

    /// <summary>
    /// Verify the match detail shows the save success notification when set and dismisses when the close button is clicked
    /// </summary>
    [Fact]
    public void Match_Detail_Shows_Save_Success_And_Dismissable()
    {
        // Arrange
        InitialValues.SaveResponse = new MatchDetailSaveResponseData
        {
            SaveSuccess = true
        };
        CreateTestComponent();
        var saveSuccessElement = Component!.Find($".match-detail-save-success");

        // Assert
        Assert.NotNull(saveSuccessElement);

        // Act - Dismiss the alert
        saveSuccessElement.QuerySelector(".usa-button").Click();

        // Assert
        Assert.Empty(Component!.FindAll($".match-detail-save-success"));
    }

    #endregion
}