@using Piipan.Components.Alerts
@using Piipan.Components.Enums
@using System.Linq.Expressions
@using Piipan.Components.Forms
@using Piipan.Components.Modals
@using Piipan.Components.Tag
@using Piipan.Match.Api.Models.Resolution
@using Piipan.QueryTool.Client.Components.MatchDetail
@using Piipan.QueryTool.Client.Components.UnauthorizedBanners
@using Piipan.QueryTool.Client.Modals
@using Piipan.QueryTool.Client.Models
@using Piipan.States.Api.Models
@using Piipan.Shared.API.Utilities
@using static Piipan.Components.Tag.TagConstants
@inherits BaseComponentTest<MatchDetailWrapper>

@code {
    private IRenderedComponent<UsaForm> usaForm;
    /// <summary>
    /// Set the default initial values for this test component
    /// </summary>
    public MatchDetailWrapperTests() : base()
    {
        InitialValues = new Piipan.QueryTool.Client.Components.MatchDetail.MatchDetailWrapper()
        {
            Match = new ParameterBase<MatchResApiResponse>
            {
                Data = new MatchResApiResponse
                {
                    Data = new MatchResRecord
                    {
                        Status = "open",
                        MatchId = "M123456",
                        Dispositions = new Disposition[]
                    {
                    new Disposition
                    {
                        State = "ea",
                        FinalDisposition = "Benefits Approved",
                        FinalDispositionDate = DateTime.Parse("02/02/2022"),
                        VulnerableIndividual = false,
                        InvalidMatch = false,
                        InitialActionAt = DateTime.Parse("01/01/2022"),
                        InitialActionTaken = "Notice Sent"
                    },
                    new Disposition
                    {
                        State = "eb",
                        FinalDisposition = "Benefits Terminated",
                        FinalDispositionDate = DateTime.Parse("02/02/2021"),
                        VulnerableIndividual = false,
                        InvalidMatch = false,
                        InitialActionAt = DateTime.Parse("01/01/2021"),
                        InitialActionTaken = "Notice Sent"
                    }
                    },
                        Participants = new Participant[]
                    {
                    new Participant
                    {
                        State = "ea",
                        CaseId = "c123",
                        ParticipantId = "p123",
                        RecentBenefitIssuanceDates = new List<DateRange>
                        {
                            new DateRange
                            {
                                Start = DateTime.Parse("01/01/2022"),
                                End = DateTime.Parse("02/02/2022")
                            },
                            new DateRange
                            {
                                Start = DateTime.Parse("03/03/2022"),
                                End = DateTime.Parse("04/04/2022")
                            }
                        }
                    },
                    new Participant
                    {
                        State = "eb",
                        CaseId = "c456",
                        ParticipantId = "p456",
                        ParticipantClosingDate = DateTime.Parse("01/01/2021"),
                        RecentBenefitIssuanceDates = new List<DateRange>
                        {
                            new DateRange
                            {
                                Start = DateTime.Parse("01/01/2021"),
                                End = DateTime.Parse("02/02/2021")
                            },
                            new DateRange
                            {
                                Start = DateTime.Parse("03/03/2021"),
                                End = DateTime.Parse("04/04/2021")
                            }
                        }
                    }
                    },
                        States = new string[] { "ea", "eb" },
                        Initiator = "ea"
                    }
                }
            },
            StateInfo = new ParameterBase<StatesInfoResponse>
            {
                Data = new StatesInfoResponse
                {
                    Results = new List<StateInfoResponseData>
                    {
                        new StateInfoResponseData
                        {
                            State = "Echo Alpha",
                            StateAbbreviation = "ea",
                            Email = "ea-test@usda.example",
                            Phone = "123-456-7890"
                        },
                        new StateInfoResponseData
                        {
                            State = "Echo Bravo",
                            StateAbbreviation = "eb",
                            Email = "eb-test@usda.example",
                            Phone = "123-456-7890"
                        }
                    }
                }
            },
            Role = "Worker",
            RequiredRolesToEdit = new string[] { "Worker" },
            MatchDetailInfo = new MatchDetailData() { ReferralPage = MatchDetailReferralPage.Self },
            LoggedInUsersState = "Echo Bravo"
        };
    }

    /// <summary>
    /// Create a matches list component
    /// </summary>
    protected override void CreateTestComponent()
    {
        base.CreateTestComponent();
        JSInterop.SetupVoid("piipan.utilities.registerFormValidation", _ => true).SetVoidResult();
            JSInterop.Setup<int>("piipan.utilities.getCursorPosition", _ => true).SetResult(1);
            JSInterop.SetupVoid("piipan.utilities.setCursorPosition", _ => true).SetVoidResult();
            JSInterop.SetupVoid("piipan.utilities.scrollToElement", _ => true).SetVoidResult();
        Component = Render<MatchDetailWrapper>(
            @<MatchDetailWrapper Match="InitialValues.Match" ServerErrors="InitialValues.ServerErrors" MatchDetailInfo="InitialValues.MatchDetailInfo"
                StateInfo="InitialValues.StateInfo" LoggedInUsersState="@InitialValues.LoggedInUsersState"
                Role="@InitialValues.Role" RequiredRolesToEdit="@InitialValues.RequiredRolesToEdit">
        </MatchDetailWrapper>
    );
        usaForm = Component.HasComponent<UsaForm>() ? Component.FindComponent<UsaForm>() : null;
    }

    #region Tests



    /// <summary>
    /// Verify the match unauthorzied banner shows when not authorized
    /// </summary>
    [Fact]
    public void MatchDetailWrapper_ShouldShow_UnauthorizedBanner_WhenNotAuthorized()
    {
        // Arrange
        AppData.IsAuthorized = false;
        CreateTestComponent();

        // Assert
        Assert.False(Component.HasComponent<MatchDetail>());
        Assert.True(Component.HasComponent<MatchUnauthorizedBanner>());
    }

    /// <summary>
    /// Verify the match detail component shows when authorized
    /// </summary>
    [Fact]
    public void MatchDetailWrapper_ShouldShow_MatchDetail_WhenAuthorized()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        Assert.True(Component.HasComponent<MatchDetail>());
        Assert.False(Component.HasComponent<MatchUnauthorizedBanner>());
    }

    /// <summary>
    /// Verify values are passed correctly to MatchDetail component
    /// </summary>
    [Fact]
    public void MatchDetail_Parameters_AreCorrect()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        var matchDetail = Component.FindComponent<MatchDetail>();
        Assert.Equal(matchDetail.Instance.LoggedInUsersState, InitialValues.LoggedInUsersState);
        Assert.Equal(matchDetail.Instance.Match, InitialValues.Match);
        Assert.Equal(matchDetail.Instance.MatchDetailInfo, InitialValues.MatchDetailInfo);
        Assert.Equal(matchDetail.Instance.RequiredRolesToEdit, InitialValues.RequiredRolesToEdit);
        Assert.Equal(matchDetail.Instance.Role, InitialValues.Role);
        Assert.Equal(matchDetail.Instance.ServerErrors, InitialValues.ServerErrors);
        Assert.Equal(matchDetail.Instance.StateInfo, InitialValues.StateInfo);
        Assert.Equal(matchDetail.Instance.Token, InitialValues.Token);        
    }

    #endregion
}