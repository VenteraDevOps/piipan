@using Piipan.Components.Alerts
@using Piipan.Components.Forms
@using System.Linq.Expressions
@using Piipan.Match.Api.Models.Resolution
@using Piipan.QueryTool.Client.Components.MatchDetail
@using Piipan.QueryTool.Client.Models
@using Piipan.Shared.API.Utilities
@using static Piipan.Components.Alerts.AlertConstants
@inherits BaseComponentTest<ResolutionFields>

@code {
    /// <summary>
    /// Set the default initial values for this test component
    /// </summary>
    public ResolutionFieldsTests() : base()
    {
        InitialValues = new ResolutionFields()
        {
            DispositionData = new DispositionModel()
            {
                InitialActionAt = null,
                InitialActionTaken = "",
                InvalidMatch = false,
                InvalidMatchReason = "",
                OtherReasoningForInvalidMatch = "",
                FinalDisposition = "",
                FinalDispositionDate = null,
                VulnerableIndividual = null,
                State = "EA"
            }
        };
    }


    /// <summary>
    /// Create a StateParticipantInformation component
    /// </summary>
    protected override void CreateTestComponent()
    {
        JSInterop.SetupVoid("piipan.utilities.registerFormValidation", _ => true).SetVoidResult();
            JSInterop.Setup<int>("piipan.utilities.getCursorPosition", _ => true).SetResult(1);
            JSInterop.SetupVoid("piipan.utilities.setCursorPosition", _ => true).SetVoidResult();
            JSInterop.SetupVoid("piipan.utilities.scrollToElement", _ => true).SetVoidResult();
        Component = Render<ResolutionFields>(
            @<Piipan.Components.Forms.UsaForm Model="InitialValues.DispositionData">
                <ResolutionFields State="Echo Bravo" InitiatingState=true DispositionData="@InitialValues.DispositionData">
                </ResolutionFields>
            </Piipan.Components.Forms.UsaForm>
        );
    }

    #region Tests

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void Resolution_Fields_status_markup()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        Component!.MarkupMatches(
    @<text >
      <h3 >Update information about this match for Echo Bravo</h3>
      <p class="infoSavedText" >After the information is saved, it will appear in the
        <b >match information</b>
        panel.</p>
          <input type="hidden" name="__RequestVerificationToken" >
            <div diff:ignore> //Ignoring Vulnerable Invalid Component
            </div>
            <div diff:ignore> //Ignoring Initial Action Component
            </div>
            <div diff:ignore> //Ignoring Final Disposition Component
            </div>
        </text>
    );
    }

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void InvalidMatchTrue_DisablesInitialAction_WhenInitialActionNotSet()
    {
        // Arrange
        CreateTestComponent();

        // Act
        // Selct the Invalid Match Yes radio button
        Component.Find("[name=\"DispositionData.InvalidMatch\"]").Change("True");

        // Assert
        VerifyDisabledInitialActionSection();
    }

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void InvalidMatchFalse_EnablesInitialAction_WhenInitialActionNotSet()
    {
        // Arrange
        CreateTestComponent();

        // Act
        // Selct the Invalid Match No radio button
        Component.Find("[name=\"DispositionData.InvalidMatch\"]").Change("False");

        // Assert
        VerifyEnabledInitialActionSection();
    }

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void InvalidMatchNull_EnablesInitialAction_WhenInitialActionNotSet()
    {
        // Arrange
        CreateTestComponent();

        // Assert
        VerifyEnabledInitialActionSection();
    }

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void InvalidMatchTrue_InitialActionEnabled_WhenInitialActionAtSet()
    {
        // Arrange
        InitialValues.DispositionData.InitialActionAt = DateTime.Now;
        CreateTestComponent();

        // Act
        // Selct the Invalid Match Yes radio button
        Component.Find("[name=\"DispositionData.InvalidMatch\"]").Change("True");

        // Assert
        VerifyEnabledInitialActionSection();
    }

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void InvalidMatchTrue_InitialActionEnabled_WhenInitialActionTakenSet()
    {
        // Arrange
        InitialValues.DispositionData.InitialActionTaken = "Notice Sent";
        CreateTestComponent();

        // Act
        // Selct the Invalid Match Yes radio button
        Component.Find("[name=\"DispositionData.InvalidMatch\"]").Change("True");

        // Assert
        VerifyEnabledInitialActionSection();
    }

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void InvalidMatchTrue_InitialActionDisabled_WhenInitialActionTakenSetAndThenCleared()
    {
        // Arrange
        InitialValues.DispositionData.InitialActionTaken = "Notice Sent";
        CreateTestComponent();

        // Act
        // Selct the Invalid Match Yes radio button
        Component.Find("[name=\"DispositionData.InvalidMatch\"]").Change("True");
        Component.Find("[name=\"DispositionData.InitialActionTaken\"]").Change("");

        // Assert
        VerifyDisabledInitialActionSection();
    }

    /// <summary>
    /// Verify the default markup of the state contact information
    /// </summary>
    [Fact]
    public void InvalidMatchTrue_InitialActionDisabled_WhenInitialActionAtSetAndThenCleared()
    {
        // Arrange
        InitialValues.DispositionData.InitialActionAt = DateTime.Now;
        CreateTestComponent();

        // Act
        // Selct the Invalid Match Yes radio button
        Component.Find("[name=\"DispositionData.InvalidMatch\"]").Change("True");
        Component.Find("[name=\"DispositionData.InitialActionAt\"]").Change("");

        // Assert
        VerifyDisabledInitialActionSection();
    }

    private void VerifyDisabledInitialActionSection()
    {
        var initialActionSection = Component.Find("#initial-action-section");

        // Assert
        Assert.True(initialActionSection.ClassList.Contains("disabled-area"));
        var inputs = initialActionSection.QuerySelectorAll("input,select");
        Assert.Equal(2, inputs.Count());
        foreach (var input in inputs)
        {
            Assert.True(input.HasAttribute("disabled"));
        }
    }

    private void VerifyEnabledInitialActionSection()
    {
        var initialActionSection = Component.Find("#initial-action-section");

        // Assert
        Assert.False(initialActionSection.ClassList.Contains("disabled-area"));
        var inputs = initialActionSection.QuerySelectorAll("input,select");
        Assert.Equal(2, inputs.Count());
        foreach (var input in inputs)
        {
            Assert.False(input.HasAttribute("disabled"));
        }
    }

    #endregion
}
