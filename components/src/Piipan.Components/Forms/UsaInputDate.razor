@using static FormConstants
@inherits UsaInputBase<DateTime?>
@inject IJSRuntime JSRuntime
@code {
    InputDate<DateTime?> InputDateReference { get; set; }
    IJSObjectReference inputDateJavascriptReference;
    public override int? Width { get; set; } = 180;

    protected override async Task<List<string>> PreverificationChecks()
    {
        bool hasBadInput = await inputDateJavascriptReference.InvokeAsync<bool>("DoesElementHaveInvalidInput", Id);
        if (hasBadInput)
        {
            return new List<string>() { ValidationConstants.InvalidMessage };
        }
        else
        {
            return null;
        }
    }

    /// <summary>
    /// Grab the input date javascript reference to be used later
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (inputDateJavascriptReference == null)
        {
            inputDateJavascriptReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Piipan.Components/Forms/UsaInputDate.razor.js");
        }
    }
}

<InputDate @ref="InputDateReference"
           class="@($"{InputClass} {(FormGroup.Status != InputStatus.None ? $"{InputClass}--{FormGroup.Status.ToString().ToLower()}" : "")}")"
           @bind-Value="CurrentValue" @onblur="BlurField"
           required="@FormGroup.Required"
           id="@Id"
           name="@Id.Replace("_", ".")"
           aria-errormessage="@(FormGroup.Status == InputStatus.Error ? $"{Id}-message" : null)"
           aria-invalid="@(FormGroup.Status == InputStatus.Error ? "true" : null)"
           @attributes="AdditionalAttributes"
           style="@(Width != null ? $"width: {Width}px;" : "")">
</InputDate>